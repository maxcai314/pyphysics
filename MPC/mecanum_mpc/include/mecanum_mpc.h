/*
mecanum_mpc : A fast customized optimization solver.

Copyright (C) 2013-2022 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCESPRO v6.0.1 on Tuesday, January 31, 2023 at 5:44:44 AM */
#ifndef mecanum_mpc_H
#define mecanum_mpc_H

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H

#include <stdio.h>

#endif
#ifndef SOLVER_STRING_H
#define SOLVER_STRING_H

#include <string.h>

#endif


#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double mecanum_mpc_float;
typedef double mecanum_mpc_ldl_s_float;
typedef double mecanum_mpc_ldl_r_float;
typedef double mecanum_mpc_callback_float;

typedef double mecanum_mpcinterface_float;

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_mecanum_mpc
#define MISRA_C_mecanum_mpc (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_mecanum_mpc
#define RESTRICT_CODE_mecanum_mpc (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_mecanum_mpc
#define SET_PRINTLEVEL_mecanum_mpc    (0)
#endif

/* timing */
#ifndef SET_TIMING_mecanum_mpc
#define SET_TIMING_mecanum_mpc    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_mecanum_mpc            (200)

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_mecanum_mpc        (mecanum_mpc_float)(0.99)

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_mecanum_mpc    (200)

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_mecanum_mpc            (4)

/* desired relative duality gap */
#define SET_ACC_RDGAP_mecanum_mpc        (mecanum_mpc_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_mecanum_mpc        (mecanum_mpc_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_mecanum_mpc    (mecanum_mpc_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_mecanum_mpc    (mecanum_mpc_float)(1E-06)


/* SOLVER RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_mecanum_mpc      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_mecanum_mpc (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_mecanum_mpc   (2)

/* solver stopped externally */
#define EXIT_EXTERNAL_mecanum_mpc (3)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_mecanum_mpc  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_mecanum_mpc   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_mecanum_mpc  (-6)

/* no progress in method possible */
#define NOPROGRESS_mecanum_mpc   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_mecanum_mpc   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_mecanum_mpc   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_mecanum_mpc   (-12)

/* thread error */
#define THREAD_FAILURE_mecanum_mpc  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_mecanum_mpc  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_mecanum_mpc  (-100)

/* Insufficient number of internal memory instances.
 * Increase codeoptions.max_num_mem. */
#define MEMORY_INVALID_mecanum_mpc (-101)
/* Number of threads larger than specified.
 * Increase codeoptions.nlp.max_num_threads. */
#define NUMTHREADS_INVALID_mecanum_mpc (-102)

/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)


/* MEMORY STRUCT --------------------------------------------------------*/
typedef struct mecanum_mpc_mem mecanum_mpc_mem;
#ifdef __cplusplus
extern "C" {
#endif

/* MEMORY STRUCT --------------------------------------------------------*/
extern mecanum_mpc_mem *mecanum_mpc_external_mem(void *mem_ptr, solver_int32_unsigned i_mem, size_t mem_size);

extern size_t mecanum_mpc_get_mem_size(void);

extern size_t mecanum_mpc_get_const_size(void);

#ifdef __cplusplus
}
#endif

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct {
    /* vector of size 100 */
    mecanum_mpc_float x0[100];

    /* vector of size 6 */
    mecanum_mpc_float xinit[6];

    /* vector of size 210 */
    mecanum_mpc_float all_parameters[210];


} mecanum_mpc_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct {
    /* column vector of length 10 */
    mecanum_mpc_float x01[10];

    /* column vector of length 10 */
    mecanum_mpc_float x02[10];

    /* column vector of length 10 */
    mecanum_mpc_float x03[10];

    /* column vector of length 10 */
    mecanum_mpc_float x04[10];

    /* column vector of length 10 */
    mecanum_mpc_float x05[10];

    /* column vector of length 10 */
    mecanum_mpc_float x06[10];

    /* column vector of length 10 */
    mecanum_mpc_float x07[10];

    /* column vector of length 10 */
    mecanum_mpc_float x08[10];

    /* column vector of length 10 */
    mecanum_mpc_float x09[10];

    /* column vector of length 10 */
    mecanum_mpc_float x10[10];


} mecanum_mpc_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct {
    /* scalar: iteration number */
    solver_int32_default it;

    /* scalar: number of iterations needed to optimality (branch-and-bound) */
    solver_int32_default it2opt;

    /* scalar: inf-norm of equality constraint residuals */
    mecanum_mpc_float res_eq;

    /* scalar: inf-norm of inequality constraint residuals */
    mecanum_mpc_float res_ineq;

    /* scalar: norm of stationarity condition */
    mecanum_mpc_float rsnorm;

    /* scalar: max of all complementarity violations */
    mecanum_mpc_float rcompnorm;

    /* scalar: primal objective */
    mecanum_mpc_float pobj;

    /* scalar: dual objective */
    mecanum_mpc_float dobj;

    /* scalar: duality gap := pobj - dobj */
    mecanum_mpc_float dgap;

    /* scalar: relative duality gap := |dgap / pobj | */
    mecanum_mpc_float rdgap;

    /* scalar: duality measure */
    mecanum_mpc_float mu;

    /* scalar: duality measure (after affine step) */
    mecanum_mpc_float mu_aff;

    /* scalar: centering parameter */
    mecanum_mpc_float sigma;

    /* scalar: number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;

    /* scalar: number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;

    /* scalar: step size (affine direction) */
    mecanum_mpc_float step_aff;

    /* scalar: step size (combined direction) */
    mecanum_mpc_float step_cc;

    /* scalar: total solve time */
    mecanum_mpc_float solvetime;

    /* scalar: time spent in function evaluations */
    mecanum_mpc_float fevalstime;

    /* column vector of length 8: solver ID of FORCESPRO solver */
    solver_int32_default solver_id[8];


} mecanum_mpc_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Tuesday, January 31, 2023 5:44:45 AM */
/* User License expires on: (UTC) Monday, February 6, 2023 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Monday, February 6, 2023 10:00:00 PM (approx.) */
/* Solver Id: e26d90bc-4712-4752-bfb7-5b4495aaa72f */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif

typedef solver_int32_default (*mecanum_mpc_extfunc)(mecanum_mpc_float *x, mecanum_mpc_float *y,
                                                    mecanum_mpc_float *lambda, mecanum_mpc_float *params,
                                                    mecanum_mpc_float *pobj, mecanum_mpc_float *g, mecanum_mpc_float *c,
                                                    mecanum_mpc_float *Jeq, mecanum_mpc_float *h,
                                                    mecanum_mpc_float *Jineq, mecanum_mpc_float *H,
                                                    solver_int32_default stage, solver_int32_default iterations,
                                                    solver_int32_default threadID);

extern solver_int32_default
mecanum_mpc_solve(mecanum_mpc_params *params, mecanum_mpc_output *output, mecanum_mpc_info *info, mecanum_mpc_mem *mem,
                  FILE *fs, mecanum_mpc_extfunc evalextfunctions_mecanum_mpc);


#ifdef __cplusplus
}
#endif

#endif
